import os
import sys
import subprocess

class EnvManager:
    def __init__(self, venv_dir="venv", requirements_file="requirements.txt"):
        self.venv_dir = venv_dir
        self.requirements_file = requirements_file

    def setup(self):
        """
        Cria a venv se necess√°rio, relan√ßa o script dentro da venv e instala depend√™ncias.
        """
        python_bin = "python.exe" if os.name == "nt" else "python"
        bin_dir = "Scripts" if os.name == "nt" else "bin"
        venv_bin = os.path.join(self.venv_dir, bin_dir)
        python_path = os.path.join(venv_bin, python_bin)

        # 1Ô∏è‚É£ Cria a venv se n√£o existir
        if not os.path.exists(self.venv_dir):
            print(f"üîß Criando virtualenv em {self.venv_dir}...")
            subprocess.check_call([sys.executable, "-m", "venv", self.venv_dir])
        else:
            print(f"‚úÖ Virtualenv j√° existe em {self.venv_dir}")

        # 2Ô∏è‚É£ Verifica se j√° est√° dentro da venv
        in_venv = os.environ.get("VIRTUAL_ENV") == os.path.abspath(self.venv_dir)

        if not in_venv:
            # Relan√ßa o script dentro da venv
            print("‚ö° Relan√ßando o script dentro da venv...")
            os.environ["VIRTUAL_ENV"] = os.path.abspath(self.venv_dir)
            os.environ["PATH"] = venv_bin + os.pathsep + os.environ.get("PATH", "")
            os.execv(python_path, [python_path] + sys.argv)
        else:
            # 3Ô∏è‚É£ Instala depend√™ncias dentro da venv ativa
            if os.path.exists(self.requirements_file):
                print(f"üì¶ Instalando depend√™ncias de {self.requirements_file} na venv...")
                subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
                subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", self.requirements_file])
            else:
                print(f"‚ö†Ô∏è Arquivo {self.requirements_file} n√£o encontrado.")

            print("‚úÖ Venv pronta e ativa. Agora voc√™ pode continuar seu script normalmente.")


# ----------------------------
# Uso
# ----------------------------
if __name__ == "__main__":
    manager = EnvManager()
    manager.setup()
